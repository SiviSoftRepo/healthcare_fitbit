
/*
 * Created on 2020-02-08 ( Date ISO 2020-02-08 - Time 19:53:06 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */

package com.sdx.controller;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.sdx.entity.BaseEntity;
import com.sdx.entity.Diagnosis;
import com.sdx.entity.HomeCare;
import com.sdx.entity.Nurse;
import com.sdx.entity.Patient;
import com.sdx.service.impl.DiagnosisServiceImpl;
import com.sdx.service.impl.DoctorServiceImpl;
import com.sdx.service.impl.HomeCareServiceImpl;
import com.sdx.service.impl.NurseServiceImpl;
import com.sdx.service.impl.PatientServiceImpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.bson.types.ObjectId;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.*;

//--- Common classes
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.xml.bind.annotation.*;
import org.bson.Document;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.sdx.platform.config.Memory;
import com.sdx.platform.domain.ResponseDomainUtil;
import groovy.lang.GroovyObject;
import com.sdx.service.impl.PatientServiceImpl;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "patients")
@Path("/cds/patient")
public class PatientController {

	@Autowired
	private PatientServiceImpl patientService; // Injected by Spring

	@Autowired
	private DoctorServiceImpl doctorService;

	@Autowired
	private NurseServiceImpl nurseService;
	
	@Autowired
	private DiagnosisServiceImpl diagnosisService;

	@Autowired
	private HomeCareServiceImpl homecareService;
	
	
	@GET
	@Path("/get")
	@Produces("application/json")
	public List<BaseEntity> findAllPatient() throws IOException {
		
		System.out.println("I am in Patient");
		log.info("Get all Patient:::"+patientService.findAll());
		return patientService.findAll();
	}

	@GET
	@Path("/getForm")
	@Produces("application/json")
	public String createPatient() throws URISyntaxException, IOException {
		log.info("Getting Patient :::::::::");
		
		try {
			
			ArrayList<Object> doctorArray 		= doctorService.findAllDoctor();
			ArrayList<Object> nursesArray 		= nurseService.findAllNurses();
			ArrayList<Object> diagnosisArray 	= diagnosisService.findAllDiagnosis();
			ArrayList<Object> homeServiceArray 	= homecareService.findAllHomeCare();
			
			HashMap<String, ArrayList<Object>> dbrefMap = new HashMap<String, ArrayList<Object>>();
			dbrefMap.put("Doctor", 		doctorArray);
			dbrefMap.put("Nurse", 		nursesArray);
			dbrefMap.put("Diagnosis", 	diagnosisArray);
			dbrefMap.put("Homecare", 	homeServiceArray);

			GroovyObject gryObject 	= Memory.getGroovyObjects().get("PatientExtensions");
			String patientJson 		= (String) gryObject.invokeMethod("buildFIO", dbrefMap);
			return patientJson;

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "{Error Occured}";

	}

	@POST
	@Path("/add")
	@Consumes("application/json")
	public Response save(LinkedHashMap<String, Object> patientObject) throws URISyntaxException, IOException {
		log.info("Creating Patient ::::::::");
		Gson gson = new Gson();
		String patientJson = gson.toJson(patientObject, LinkedHashMap.class);
		BaseEntity patient = null;
		try {
			ObjectMapper mapper = new ObjectMapper();
			patient = mapper.readValue(patientJson, Patient.class);
			patientService.save(patient);

			System.out.println("SAved In PATEINT DB");

		} catch (Exception e) {
			e.printStackTrace();
		}

		return Response.status(201).build();
	}
	
	
	@POST
	@Path("/addRef")
	@Consumes("application/json")
	public BaseEntity saveByRef(LinkedHashMap<String, Object> patientObject) {
		log.info("Creating patientObject saveByRef ::::::::" + patientObject);
		String doctor 		= (String) patientObject.get("doctor");
		String diagnosis 	= (String) patientObject.get("diagnosis");
		String nurse 		= (String) patientObject.get("nurse");
		String homecareName = (String) patientObject.get("homecare");
		
		Gson gson = new Gson();
		ObjectMapper mapper = new ObjectMapper();
		System.out.println("ID DOCTOR  " + doctor);
		System.out.println("ID DIAGNOSIS  " + diagnosis);
		System.out.println("ID NURSE  " + nurse);
		System.out.println("HC NAME  " + homecareName);
		try {
			patientObject.put("doctor", 	doctorService.findByDoctorName(doctor).toString());
			patientObject.put("diagnosis", 	new Diagnosis(diagnosisService.findByDiagnosisName(diagnosis).toString()));
			patientObject.put("nurse", 		new Nurse(nurseService.findByNurseName(nurse).toString()));
			patientObject.put("homecare", 	new HomeCare(homecareService.findByHomecareName(homecareName).toString()));
			//System.out.println("userRolesService.findUserRoleName(userRoleId):::::::::::"+userRolesService.findUserRoleName(userRoleId));
			System.out.println(">>>>>>>>>>>>>>>>> to string val ::"+patientObject);
			
			String patientJson = gson.toJson(patientObject, LinkedHashMap.class);
			System.out.println(patientJson);
			
			//mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
			Patient patient = mapper.readValue(patientJson, Patient.class);
			System.out.println("DATABASE GOING VALUE "+doctorService.findByDoctorName(doctor).toString());
			patientService.saveByRef(patient);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}


	@GET
	@Path("/getPatient/{idifier}")
	@Produces("application/json")
	public Response findById(@PathParam("idifier") String id) throws URISyntaxException {
		log.info("Getting PatientID ::::::::" + id);
		
		HashMap ref = new HashMap();

		

		System.out.println(id);
		Document document = Document.parse(new Gson().toJson(patientService.findById(id)));
		
		Patient  patient = (Patient) patientService.findById(id);
		String doctorName = patient.getDoctor().getDoctorName();
		String diagnosisName = patient.getDiagnosis().getDiseasesName();
		String nurseName = patient.getNurse().getName();
		String defaultGender = patient.getGender();
		String defaultStatus = patient.getStatus();
		String defaultLocation = patient.getLocation();
		String defaultHomeCare = patient.getHomecare().getName();
		
		
		System.out.println("DOCUMENT"+document);
	
		
		
	
		
		ArrayList<Object> doctorArray = doctorService.findAllDoctor();
		ArrayList<Object> nursesArray = nurseService.findAllNurses();
		ArrayList<Object> diagnosisArray = diagnosisService.findAllDiagnosis();
		ArrayList<Object> homeServiceArray 	= homecareService.findAllHomeCare();
		
		HashMap dbrefMap = new HashMap();
		dbrefMap.put("defaultDiagnosisName", diagnosisName);
		dbrefMap.put("defaultNurseNameName", nurseName);
		dbrefMap.put("defaultDoctorName", doctorName);
		dbrefMap.put("Doctor", doctorArray);
		dbrefMap.put("Nurse", nursesArray);
		dbrefMap.put("Diagnosis", diagnosisArray);
		dbrefMap.put("defaultGender", defaultGender);
		dbrefMap.put("defaultStatus", defaultStatus);
		dbrefMap.put("defaultLocation", defaultLocation);
		dbrefMap.put("defaultHomeCare", defaultHomeCare);
		dbrefMap.put("Homecare", 	homeServiceArray);
		
		
		System.out.println("DDDDDDDDDDDDDDD" +nursesArray);
		
		System.out.println("Document I am Printing"+document);
		
		if (document == null) {
			return Response.status(404).entity("error").build();
		} else {

		try {

		
			JSONObject patientObject = ResponseDomainUtil.buildEditNew(document, "PatientExtensions",dbrefMap);
			return Response.status(200).entity(patientObject.toString()).build();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return Response.status(404).entity("error").build();
		
		
			
		}

	}

	@POST
	@Path("/update/{id}")
	@Consumes("application/json")
	@Produces("application/json")
	public Response update(@PathParam("id") String id, LinkedHashMap<String, Object> patientObject)
			throws URISyntaxException {
		log.info("Creating patientObject ::::::::" + patientObject);
		String doctor = (String) patientObject.get("doctor");
		String diagnosis = (String) patientObject.get("diagnosis");
		String nurse = (String) patientObject.get("nurse");
		String homeCare = (String) patientObject.get("homecare");
		
		Gson gson = new Gson();
		ObjectMapper mapper = new ObjectMapper();
		System.out.println("ID DOCTOR  " + doctor);
		System.out.println("ID DIAGNOSIS  " + diagnosis);
		System.out.println("ID NURSE  " + nurse);
		try {
			patientObject.put("doctor", doctorService.findByDoctorName(doctor).toString());
			patientObject.put("diagnosis", new Diagnosis(diagnosisService.findByDiagnosisName(diagnosis).toString()));
			patientObject.put("nurse", new Nurse(nurseService.findByNurseName(nurse).toString()));
			patientObject.put("homecare", 	new HomeCare(homecareService.findByHomecareName(homeCare).toString()));
			//System.out.println("userRolesService.findUserRoleName(userRoleId):::::::::::"+userRolesService.findUserRoleName(userRoleId));
			System.out.println("to string val ::"+patientObject);
			
			String patientJson = gson.toJson(patientObject, LinkedHashMap.class);
			System.out.println(patientJson);
			Patient patient = mapper.readValue(patientJson, Patient.class);
			patientService.update(id, patient);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}
	

	@DELETE
	@Path("/delete/{id}")
	public Response delete(@PathParam("id") String id) throws URISyntaxException {
		log.info("Deleting a Patient");
		if (patientService.findById(id) != null) {
			patientService.delete(id);
			return Response.status(200).build();
		}
		return Response.status(404).build();
	}

}
