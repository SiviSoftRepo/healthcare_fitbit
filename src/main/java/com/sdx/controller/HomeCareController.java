
/*
 * Created on 2020-02-08 ( Date ISO 2020-02-08 - Time 19:53:06 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */

package com.sdx.controller;

import java.util.List;

import com.sdx.entity.BaseEntity;
import com.sdx.entity.HomeCare;
import com.sdx.entity.Patient;
import com.sdx.service.impl.HomeCareServiceImpl;

//--- Common classes

import javax.ws.rs.PathParam;
import org.springframework.beans.factory.annotation.Autowired;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.*;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.xml.bind.annotation.*;
import org.bson.Document;
import org.json.JSONObject;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.sdx.platform.config.Memory;
import com.sdx.platform.domain.ResponseDomainUtil;

import groovy.lang.GroovyObject;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "homeCares")
@Path("/cds/homeCare")
public class HomeCareController {

	@Autowired
	private HomeCareServiceImpl homeCareService; // Injected by Spring

	@GET
	@Path("/get")
	@Produces("application/json")
	public List<BaseEntity> findAllHomeCare() throws IOException {
		log.info("Get all HomeCare:::");
		return homeCareService.findAll();
	}

	@GET
	@Path("/getForm")
	@Produces("application/json")
	public String createHomeCare() throws URISyntaxException, IOException {
		log.info("Create HomeCare :::::::::");
		try {

			HashMap hash = new HashMap();
			GroovyObject gryObject = Memory.getGroovyObjects().get("HomeCareExtension");

			String homeCareJson = (String) gryObject.invokeMethod("buildFIO", hash);
			return homeCareJson;

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "{Error Occured}";

	}

	@POST
	@Path("/add")
	@Consumes("application/json")
	public Response save(LinkedHashMap<String, Object> homeCareObject) throws URISyntaxException, IOException {
		log.info("Creating HomeCare :::::::: "+homeCareObject);
		Gson gson = new Gson();
		String homeCareJson = gson.toJson(homeCareObject, LinkedHashMap.class);
		BaseEntity homeCare = null;
		try {
			ObjectMapper mapper = new ObjectMapper();
			homeCare = mapper.readValue(homeCareJson, HomeCare.class);
			homeCareService.save(homeCare);
			System.out.println("Saved IN DB");

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return Response.status(201).build();
	}

	@GET
	@Path("/gethomecare/{idifier}")
	@Produces("application/json")
	public Response findById(@PathParam("idifier") String id) throws URISyntaxException {
		log.info("Getting HomeCareID ::::::::");
		// id = "5e3f0b77a1739948c9e8c3bd";
		System.out.println("IDEFIER >>>>>>>>>" + id);
		Document document = Document.parse(new Gson().toJson(homeCareService.findById(id)));
		System.out.println("GETCARE >>>>>>>>>>" + document);
		
		HomeCare  homecare = (HomeCare) homeCareService.findById(id);
		String locationName = homecare.getLocation();
		
		HashMap dbref = new HashMap();
		dbref.put("defaultLocationName", locationName);
		if (document == null) {
			return Response.status(404).entity("error").build();
		} else {
			try {
				JSONObject homeCareObject = ResponseDomainUtil.buildEditNew(document, "HomeCareExtension",dbref);
				return Response.status(200).entity(homeCareObject.toString()).build();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return Response.status(404).entity("error").build();

	}

	@POST
	@Path("/update/{id}")
	@Consumes("application/json")
	@Produces("application/json")
	public Response update(@PathParam("id") String id, LinkedHashMap<String, Object> homeCareObject)
			throws URISyntaxException {
		log.info("Updating a HomeCare ::::::::");
		Gson gson = new Gson();
		String homeCareJson = gson.toJson(homeCareObject, LinkedHashMap.class);
		BaseEntity homeCare = null;
		try {
			ObjectMapper mapper = new ObjectMapper();
			homeCare = mapper.readValue(homeCareJson, HomeCare.class);
		} catch (Exception e) {

			e.printStackTrace();
		}
		homeCareService.update(id, homeCare);
		return Response.status(200).build();
	}

	@DELETE
	@Path("/delete/{id}")
	public Response delete(@PathParam("id") String id) throws URISyntaxException {
		log.info("Deleting a HomeCare");
		if (homeCareService.findById(id) != null) {
			homeCareService.delete(id);
			return Response.status(200).build();
		}
		return Response.status(404).build();
	}

}
