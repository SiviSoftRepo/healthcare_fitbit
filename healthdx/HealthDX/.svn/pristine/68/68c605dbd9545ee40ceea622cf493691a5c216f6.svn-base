
/*
 * Created on 2020-02-08 ( Date ISO 2020-02-08 - Time 19:53:06 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */

package com.sdx.controller;

import com.sdx.entity.BaseEntity;
import com.sdx.entity.Doctor;
import com.sdx.entity.HomeCare;
import com.sdx.entity.Patient;
import com.sdx.service.impl.DoctorServiceImpl;
import com.sdx.service.impl.HomeCareServiceImpl;

//--- Common classes

import javax.ws.rs.PathParam;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.*;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.xml.bind.annotation.*;
import org.bson.Document;
import org.json.JSONObject;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.sdx.platform.config.Memory;
import com.sdx.platform.domain.ResponseDomainUtil;

import groovy.lang.GroovyObject;

import lombok.extern.slf4j.Slf4j;



@Slf4j
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "doctor")
@Path("/cds/doctor")
public class DoctorController {

	@Autowired
	private DoctorServiceImpl doctorService; // Injected by Spring

	@GET
	@Path("/get")
	@Produces("application/json")
	public List<BaseEntity> findAllDoctor() throws IOException {
		log.info("Get all Doctor:::" + doctorService.findAll());
		return doctorService.findAll();
	}

	@GET
	@Path("/getForm")
	@Produces("application/json")
	public String createHomeCare() throws URISyntaxException, IOException {
		log.info("Create Doctor :::::::::");
		try {
			HashMap hash = new HashMap();
			GroovyObject gryObject = Memory.getGroovyObjects().get("DoctorExtension");

			String homeCareJson = (String) gryObject.invokeMethod("buildFIO", hash);
			return homeCareJson;

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "{Error Occured}";

	}

	@POST
	@Path("/add")
	@Consumes("application/json")
	public Response save(LinkedHashMap<String, Object> doctorObject) throws URISyntaxException, IOException {
		log.info("Creating Doctor ::::::::");
		
		Gson gson = new Gson();
		String doctorJson = gson.toJson(doctorObject, LinkedHashMap.class);
		BaseEntity doctor = null;
		try {
			ObjectMapper mapper = new ObjectMapper();
			doctor = mapper.readValue(doctorJson, Doctor.class);
			System.out.println("Saved IN DB");

		} catch (Exception e) {
			e.printStackTrace();
		}
		doctorService.save(doctor);
		return Response.status(201).build();
	}

	@GET
	@Path("/getdoctor/{idifier}")
	@Produces("application/json")
	public Response findById(@PathParam("idifier") String id) throws URISyntaxException, FileNotFoundException, IOException {
		log.info("Getting DoctorID ::::::::");
		
		System.out.println("IDEFIER >>>>>>>>>" + id);
		Document document = Document.parse(new Gson().toJson(doctorService.findById(id)));
		System.out.println("GETCARE >>>>>>>>>>" + document);
		
		
		ArrayList a = DoctorController.city();
		System.out.println("ARRAYLIST FROM ANAOTHER METHOD"+a);
		Doctor  doctor = (Doctor) doctorService.findById(id);
		String defaultShift = doctor.getShift();
		String defaultAvail = doctor.getAvailability();
		
		HashMap doctorMap = new HashMap();
		
		doctorMap.put("defaultShift", defaultShift);
		doctorMap.put("defaultAvail", defaultAvail);
		
		
		if (document == null) {
			return Response.status(404).entity("error").build();
		} else {
			try {
				JSONObject doctorObject = ResponseDomainUtil.buildEditNew(document, "DoctorExtension",doctorMap);
				return Response.status(200).entity(doctorObject.toString()).build();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return Response.status(404).entity("error").build();

	}

	@POST
	@Path("/update/{id}")
	@Consumes("application/json")
	@Produces("application/json")
	public Response update(@PathParam("id") String id, LinkedHashMap<String, Object> doctorObject)
			throws URISyntaxException {
		log.info("Updating a Doctor ::::::::");
		Gson gson = new Gson();
		String doctorJson = gson.toJson(doctorObject, LinkedHashMap.class);
		BaseEntity doctor = null;
		try {
			ObjectMapper mapper = new ObjectMapper();
			doctor = mapper.readValue(doctorJson, Doctor.class);
		} catch (Exception e) {

			e.printStackTrace();
		}
		doctorService.update(id, doctor);
		return Response.status(200).build();
	}

	@DELETE
	@Path("/delete/{id}")
	public Response delete(@PathParam("id") String id) throws URISyntaxException {
		log.info("Deleting a Doctor");
		if (doctorService.findById(id) != null) {
			doctorService.delete(id);
			return Response.status(200).build();
		}
		return Response.status(404).build();
	}
	@SuppressWarnings("unchecked")
	public static ArrayList city () {
		
	
		return null;
		
		
		
	}

}
